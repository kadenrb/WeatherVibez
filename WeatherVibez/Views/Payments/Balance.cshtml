@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@model User
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery Antiforgery

<!-- Anti-forgery token for form submission -->
<input type="hidden" name="__RequestVerificationToken" value="@Antiforgery.GetAndStoreTokens(Context).RequestToken" />

<div class="container mt-5">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white">
            <h1 class="card-title mb-0">Your Balance: $@Model.Balance</h1>
        </div>

        <div class="card-body">
            <div id="payment-form" class="mb-4">
                <div class="form-group mb-3">
                    <!-- Input for the amount to add to the balance -->
                    <input type="number"
                           id="amount"
                           class="form-control form-control-lg"
                           step=".01"
                           min="1"
                           required
                           placeholder="Enter amount ($)">
                </div>

                <div class="form-group mb-3">
                    <!-- Stripe card element for payment details -->
                    <div id="card-element" class="form-control p-3 bg-dark text-white"></div>
                </div>

                <div class="d-grid gap-3">
                    <!-- Button to submit the payment -->
                    <button id="submit-button"
                            type="button"
                            class="btn btn-primary btn-lg">
                        Add Funds
                    </button>
                    <!-- Link to go back to the weather search page -->
                    <a href="@Url.Action("SearchWeather", "Weather")"
                       class="btn btn-danger btn-lg">
                        Back to the weather!
                    </a>
                </div>

                <!-- Error message display -->
                <div id="error-message" class="alert alert-danger mt-3 d-none"></div>
            </div>
        </div>
    </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
    const stripe = Stripe('@Configuration["Stripe:PublishableKey"]');
    const elements = stripe.elements();

    // CSS styles for the Stripe card element cuz no boostrap options :(
    const cardStyle = {
        base: {
            fontSize: '18px',
            color: '#ffffff',
            '::placeholder': {
                color: '#ffffff',
                opacity: '0.9'
            },
            padding: '15px',
            backgroundColor: 'transparent'
        },
        invalid: {
            color: '#ff5252'
        }
    };

    const cardElement = elements.create('card', {
        style: cardStyle,
        hidePostalCode: true
    });

    cardElement.mount('#card-element');

    document.getElementById('submit-button').addEventListener('click', async (e) => {
        e.preventDefault();

        const amount = parseFloat(document.getElementById('amount').value);
        if (!amount || amount < 1) {
            alert('Please enter at least $1');
            return;
        }

        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Send charge request to the server
            const response = await fetch('/Payments/Charge', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                credentials: 'include',
                body: JSON.stringify({ amount: amount })
            });

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error(`Invalid response format: ${await response.text()}`);
            }

            const data = await response.json();
            if (!response.ok) throw new Error(data.error || 'Payment failed');

            // Confirm the card payment with Stripe
            const { error } = await stripe.confirmCardPayment(data.clientSecret, {
                payment_method: { card: cardElement }
            });
            if (error) throw error;

            // Confirm the payment on the server
            await fetch('/Payments/ConfirmPayment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                credentials: 'include',
                body: JSON.stringify({ amount: data.amount })
            });

            // Redirect to the Payments page
            window.location.href = "/Payments/";

        } catch (error) {
            const errorElement = document.getElementById('error-message');
            errorElement.textContent = error.message;
            errorElement.classList.remove('d-none');
            console.error('Payment error:', error);
        }
    });
</script>
